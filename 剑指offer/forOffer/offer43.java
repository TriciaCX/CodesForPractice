package forOffer;

public class offer43 {
    /**
     * leetcode233
     * 从 1 到 n 整数中 1 出现的次数
     * 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
     * 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
     * ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
     */

    /**
     * 设N = abcde ,其中abcde分别为十进制中各位上的数字。
     * 如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
     * 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。注意：高位数字不包括当前位
     * 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100~12113,一共14个，等于低位数字（13）+1。 注意：低位数字不包括当前数字
     * 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）
     */

    /*数学之美算法：
        a=n/i,b=n%i;
        比如a=314,b=56;当a的个位大于1时（也就是n的百位），百位为1的数总共出现了(a/10+1)*100次
        当a为1的时候，百位为1的数总共出现了(a/10)*100+(b+1);当a为0的时候，百位为1的数出现了(a/10)*100次；
        因此可以根据a的个位是否为1分成2种情况计算；9=>a个位>=2时(a/10+1)和0=<a个位<=1时（a/10）表达式与（a+8）/10相同，当a个位为1时需要加上（b+1）与(a%10==1)*(b+1)相同
     */
    public int NumberOf1Between1AndN_Solution(int n) {
        int cnt = 0;
        for(long i=1;i<=n;i=i*10){
            long a = n/i;
            long b = n%i;
            cnt+=(a+8)/10*i + (a%10==1?b+1:0);
        }
        return cnt;
    }
}
