package interviewTop100;

public class leetcode27
{
	/*
	 * 解码方法
	 * 一条包含字母 A-Z 的消息通过以下方式进行了编码：

'A' -> 1
'B' -> 2
...
'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。

示例 1:

输入: "12"
输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2:

输入: "226"
输出: 3
解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
	 */
	
	
	/**
	 * 建立动态规划数组dp，dp[i]用于记录字符串至第i-1位前的解码方法的总数。
	 * 依次扫描数字，当前数字不为0时，dp[i]+=dp[i-1]表示当前组合数量包括前一位数字前的组合总数；
	 * 当前数字与前一位组合的数字处于10-26时，dp[i]+=dp[i-2]表示当前组合数量包括前两位数字前的组合总数。最后只需要返回dp[s.length()]即可。
有个tip是当两位数算得0时，说明字符串出现连续两个0，此时可以直接返回0.因为"00"所在的字符串不存在解码方式。

	 */
	public int numDecodings(String s) {
		if(s==null||s.length()==0||s.charAt(0)=='0') return 0;
		int[] dp = new int[s.length()+1];
        dp[0] = 1;
        for(int i=1;i<s.length()+1;i++) {
        	char c = s.charAt(i-1);
        	//前一位数字不为0时，可以划分一位
        	if(c!='0') {
        		dp[i] += dp[i-1];
        	}
        	//前面有两位数字，且符合1-26的范围
        	if(i>1) {
        		int num = (s.charAt(i-2)-'0')*10+(c-'0');
        		if(num==0) { // 出现连续两个0，无法解码，提前剪枝
        			return 0; 
        		}
        		if(num>9 && num<27) {
        			dp[i] +=dp[i-2];
        		}
        	}
        }
        return dp[s.length()];
	}
}